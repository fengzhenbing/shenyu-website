"use strict";(self.webpackChunkshenyu_website=self.webpackChunkshenyu_website||[]).push([[6542],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return g}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),u=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=u(t),g=i,f=s["".concat(p,".").concat(g)]||s[g]||d[g]||o;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=s;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},1254:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return c},default:function(){return s}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],l={title:"Spring Cloud Plugin",keywords:["SpringCloud"],description:"SpringCloud Plugin"},p=void 0,u={unversionedId:"plugin-center/rpc-proxy/spring-cloud-plugin",id:"version-2.4.0/plugin-center/rpc-proxy/spring-cloud-plugin",isDocsHomePage:!1,title:"Spring Cloud Plugin",description:"SpringCloud Plugin",source:"@site/versioned_docs/version-2.4.0/plugin-center/rpc-proxy/spring-cloud-plugin.md",sourceDirName:"plugin-center/rpc-proxy",slug:"/plugin-center/rpc-proxy/spring-cloud-plugin",permalink:"/docs/plugin-center/rpc-proxy/spring-cloud-plugin",editUrl:"https://github.com/apache/incubator-shenyu-website/edit/main/versioned_docs/version-2.4.0/plugin-center/rpc-proxy/spring-cloud-plugin.md",version:"2.4.0",frontMatter:{title:"Spring Cloud Plugin",keywords:["SpringCloud"],description:"SpringCloud Plugin"},sidebar:"version-2.4.0/tutorialSidebar",previous:{title:"Sofa Plugin",permalink:"/docs/plugin-center/rpc-proxy/sofa-plugin"},next:{title:"Tars Plugin",permalink:"/docs/plugin-center/rpc-proxy/tars-plugin"}},c=[{value:"Explanation",id:"explanation",children:[]},{value:"Introducing Plugin Support of SpringCould Gateway",id:"introducing-plugin-support-of-springcould-gateway",children:[]},{value:"Plugin Setting",id:"plugin-setting",children:[]},{value:"Plugin Detail",id:"plugin-detail",children:[]}],d={toc:c};function s(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"explanation"},"Explanation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This plugin is the core of transforming ",(0,o.kt)("inlineCode",{parentName:"li"},"http")," protocol into ",(0,o.kt)("inlineCode",{parentName:"li"},"springCloud protocol"),".")),(0,o.kt)("h2",{id:"introducing-plugin-support-of-springcould-gateway"},"Introducing Plugin Support of SpringCould Gateway"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Introducing those dependencies in the pom.xml file of the gateway.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},"\x3c!-- apache shenyu springCloud plugin start--\x3e\n<dependency>\n    <groupId>org.apache.shenyu</groupId>\n    <artifactId>shenyu-spring-boot-starter-plugin-springcloud</artifactId>\n    <version>${project.version}</version>\n</dependency>\n\n<dependency>\n    <groupId>org.apache.shenyu</groupId>\n    <artifactId>shenyu-spring-boot-starter-plugin-httpclient</artifactId>\n    <version>${project.version}</version>\n</dependency>\n\x3c!-- apache shenyu springCloud plugin end--\x3e\n\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-commons</artifactId>\n    <version>2.2.0.RELEASE</version>\n</dependency> \n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>\n    <version>2.2.0.RELEASE</version>\n</dependency>\n")),(0,o.kt)("h2",{id:"plugin-setting"},"Plugin Setting"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add related dependencies and enable plugin, please refer to: ",(0,o.kt)("a",{parentName:"p",href:"../../quick-start/quick-start-springcloud"},"Quick start with Spring Cloud")," .")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Spring Cloud")," client access, please refer to: ",(0,o.kt)("a",{parentName:"p",href:"../../user-guide/spring-cloud-proxy"},"Spring Cloud Proxy")," ."))),(0,o.kt)("h2",{id:"plugin-detail"},"Plugin Detail"),(0,o.kt)("p",null,"After the client accesses the ",(0,o.kt)("inlineCode",{parentName:"p"},"ShenYu")," gateway, it will automatically register the selector and rule information. For details about the selector and rule configuration, see ",(0,o.kt)("a",{parentName:"p",href:"../../user-guide/admin-usage/selector-and-rule"},"Selector and Rule Config")," ."),(0,o.kt)("h4",{id:"selector-handler"},"Selector Handler"),(0,o.kt)("img",{src:"/img/shenyu/plugin/springcloud/selector_en.png",width:"80%",height:"80%"}),(0,o.kt)("p",null,"Selector Handler, the ",(0,o.kt)("inlineCode",{parentName:"p"},"handle")," field, is an operation that can be processed by the gateway after matching the traffic. For more information, please refer to ",(0,o.kt)("a",{parentName:"p",href:"../plugin-handle-explanation"},"Plugin handle management")," in Plugin Config."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"details\uff1a"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"serviceId"),"\uff1aservice id.")))),(0,o.kt)("h4",{id:"rule-handler"},"Rule Handler"),(0,o.kt)("img",{src:"/img/shenyu/plugin/springcloud/rule_en.png",width:"80%",height:"80%"}),(0,o.kt)("p",null,"Rule Handler, the ",(0,o.kt)("inlineCode",{parentName:"p"},"handle")," field, can be performed by the gateway after the final matching of traffic. For more information, please refer to ",(0,o.kt)("a",{parentName:"p",href:"../plugin-handle-explanation"},"Plugin handle management")," in Plugin Config."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"details\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," * `path`\uff1arequest path.\n * `timeout`\uff1aset time out.\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Application name: it is your specific application name that needs to be invoked after the conditions are matched."),(0,o.kt)("li",{parentName:"ul"},"Apache ShenYu will obtain the real IP of the corresponding service and initiate http proxy calls from registration center of springCloud.")))}s.isMDXComponent=!0}}]);